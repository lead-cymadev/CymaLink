# docker-compose.yml - Versión evolutiva para proyecto IoT
services:
  # ============================================================================
  # FASE 1: INFRAESTRUCTURA BÁSICA 
  # ============================================================================
  
  # Mosquitto MQTT Broker
  mosquitto:
    image: eclipse-mosquitto:2
    container_name: mosquittoContainer
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./mosquitto/config:/mosquitto/config
      - ./mosquitto/data:/mosquitto/data
      - ./mosquitto/log:/mosquitto/log
    networks:
      - iot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "mosquitto_sub -h localhost -t '$$SYS/#' -C 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database (para usuarios y lógica de aplicación)
  postgres-db:
    image: postgres:15
    container_name: postgresContainer
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    networks:
      - iot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # pgAdmin 4 GUI para PostgreSQL
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadminContainer
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - iot-network
    depends_on:
      - postgres-db
    restart: unless-stopped

  # ============================================================================
  # FASE 2: SERVICIOS IoT 
  # ============================================================================

  # MongoDB para datos IoT (conectividad, estados, sensores)
  mongodb:
    image: mongo:6
    container_name: mongodbContainer
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DB}
    volumes:
      - mongodb-data:/data/db
      - ./mongodb/init:/docker-entrypoint-initdb.d
    networks:
      - iot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Mongo Express - GUI para MongoDB
  mongo-express:
    image: mongo-express:latest
    container_name: mongoExpressContainer
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_USER}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_PASSWORD}
      - ME_CONFIG_MONGODB_URL=mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongodb:27017/
      - ME_CONFIG_BASICAUTH_USERNAME=${MONGO_EXPRESS_USER}
      - ME_CONFIG_BASICAUTH_PASSWORD=${MONGO_EXPRESS_PASSWORD}
    networks:
      - iot-network
    depends_on:
      - mongodb
    restart: unless-stopped

  # Portainer - Gestión visual de contenedores
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainerContainer
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer-data:/data
    networks:
      - iot-network
    restart: always

  # ============================================================================
  # FASE 3: TUS MICROSERVICIOS (Para integrar después)
  # ============================================================================

  # Discovery Server
  discovery-server:
    build:
      context: ./backend/discovery-server
      dockerfile: Dockerfile
    container_name: discoveryServerContainer
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - iot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway
  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile
    container_name: apiGatewayContainer
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DATABASE_URL=jdbc:postgresql://postgres-db:5432/${DB_NAME}
      - MONGODB_URI=mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongodb:27017/${MONGO_DB}
      - MQTT_BROKER_URL=tcp://mosquitto:1883
      - EUREKA_CLIENT_SERVICE_URL=http://discovery-server:8761/eureka
    networks:
      - iot-network
    depends_on:
      - postgres-db
      - mongodb
      - mosquitto
      - discovery-server
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Users Service
  users-service:
    build:
      context: ./backend/users-service
      dockerfile: Dockerfile
    container_name: usersServiceContainer
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DATABASE_URL=jdbc:postgresql://postgres-db:5432/${DB_NAME}
      - EUREKA_CLIENT_SERVICE_URL=http://discovery-server:8761/eureka
    networks:
      - iot-network
    depends_on:
      - postgres-db
      - discovery-server
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Next.js
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontendContainer
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - NODE_ENV=production
    networks:
      - iot-network
    depends_on:
      - api-gateway
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # FASE 4: EXPERIMENTALES (Kafka para más adelante)
  # ============================================================================

  # Zookeeper (necesario para Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeperContainer
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - iot-network
    restart: unless-stopped
    profiles: ["kafka"]  # Solo se ejecuta si usas el profile kafka

  # Apache Kafka para event streaming
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafkaContainer
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - iot-network
    depends_on:
      - zookeeper
    restart: unless-stopped
    profiles: ["kafka"]  # Solo se ejecuta si usas el profile kafka

  # ============================================================================
  # FASE 5: MONITOREO (Para el final del proyecto)
  # ============================================================================

  # Prometheus para métricas
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheusContainer
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/config:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - iot-network
    restart: unless-stopped
    profiles: ["monitoring"]  # Solo se ejecuta si usas el profile monitoring

  # Grafana para visualización
  grafana:
    image: grafana/grafana:latest
    container_name: grafanaContainer
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - iot-network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles: ["monitoring"]  # Solo se ejecuta si usas el profile monitoring

# ============================================================================
# NETWORKS & VOLUMES
# ============================================================================

networks:
  iot-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
  pgadmin-data:
  mongodb-data:
  portainer-data:
  kafka-data:
  prometheus-data:
  grafana-data: